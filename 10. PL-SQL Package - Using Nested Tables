-- Experiment 10: PL/SQL Package - Using Nested Tables 

-- Create a PL/SQL package named emp_package that:  
-- • Contains a nested table to store employee salaries.  
-- • Has procedures to insert, update, and display the salaries.  
-- • Uses TABLE OF NUMBER to define the nested table.  
-- • Calls the package procedures in a PL/SQL block.



CREATE TABLE EMPLOYEE5 (
    emp_id NUMBER PRIMARY KEY,
    emp_name VARCHAR2(50) NOT NULL,
    salary NUMBER(10,2),
    department VARCHAR2(50),
    hire_date DATE DEFAULT SYSDATE
);

INSERT INTO EMPLOYEE5 VALUES (101, 'Alice', 45000, 'HR', SYSDATE);
INSERT INTO EMPLOYEE5 VALUES (102, 'Bob', 55000, 'Finance', SYSDATE);
INSERT INTO EMPLOYEE5 VALUES (103, 'Charlie', 60000, 'IT', SYSDATE);
INSERT INTO EMPLOYEE5 VALUES (104, 'David', 58000, 'Marketing', SYSDATE);
INSERT INTO EMPLOYEE5 VALUES (105, 'Emma', 62000, 'IT', SYSDATE);
COMMIT;

SELECT * FROM EMPLOYEE5;

CREATE OR REPLACE PACKAGE emp_package AS
    TYPE salary_table IS TABLE OF NUMBER;
    emp_salaries salary_table := salary_table();
    PROCEDURE insert_salary(p_salary NUMBER);
    PROCEDURE update_salary(p_index NUMBER, p_salary NUMBER);
    PROCEDURE display_salaries;
    PROCEDURE load_salaries;
END emp_package;
/

CREATE OR REPLACE PACKAGE BODY emp_package AS
    PROCEDURE insert_salary(p_salary NUMBER) IS
    BEGIN
        emp_salaries.EXTEND;
        emp_salaries(emp_salaries.LAST) := p_salary;
        DBMS_OUTPUT.PUT_LINE('Salary ' || p_salary || ' inserted.');
    END insert_salary;
    PROCEDURE update_salary(p_index NUMBER, p_salary NUMBER) IS
    BEGIN
        IF p_index BETWEEN 1 AND emp_salaries.COUNT THEN
            emp_salaries(p_index) := p_salary;
            DBMS_OUTPUT.PUT_LINE('Salary at position ' || p_index || ' updated to ' || p_salary || '.');
        ELSE
            DBMS_OUTPUT.PUT_LINE('Error: Invalid index!');
        END IF;
    END update_salary;
    PROCEDURE display_salaries IS
    BEGIN
        IF emp_salaries.COUNT = 0 THEN
            DBMS_OUTPUT.PUT_LINE('No salaries available.');
        ELSE
            FOR i IN 1..emp_salaries.COUNT LOOP
                DBMS_OUTPUT.PUT_LINE('Salary [' || i || '] = ' || emp_salaries(i));
            END LOOP;
        END IF;
    END display_salaries;
    PROCEDURE load_salaries IS
    BEGIN
        emp_salaries.DELETE;
        FOR rec IN (SELECT salary FROM EMPLOYEE5) LOOP
            emp_salaries.EXTEND;
            emp_salaries(emp_salaries.LAST) := rec.salary;
        END LOOP;
        DBMS_OUTPUT.PUT_LINE('Salaries loaded from EMPLOYEES table.');
    END load_salaries;
END emp_package;
/
  


SET SERVEROUTPUT ON;
BEGIN
    emp_package.load_salaries;
    
    emp_package.insert_salary(70000);
    emp_package.insert_salary(75000);
    
    emp_package.update_salary(2, 58000);
    emp_package.display_salaries;
    
END;
/
