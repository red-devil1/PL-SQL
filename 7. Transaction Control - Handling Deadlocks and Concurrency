-- Experiment 7: Transaction Control - Handling Deadlocks and Concurrency 

-- Write a PL/SQL block that:  
-- • Begins a transaction.  
-- • Updates the salary of an employee in the EMPLOYEES table.  
-- • Introduces a delay (DBMS_LOCK.SLEEP) to simulate concurrency issues.  
-- • Uses SAVEPOINT and ROLLBACK to handle deadlocks. 




CREATE TABLE EMPLOYEE2 (
    emp_id NUMBER PRIMARY KEY,
    emp_name VARCHAR2(50) NOT NULL,
    salary NUMBER(10,2),
    department VARCHAR(50),
    hire_date DATE DEFAULT SYSDATE
);

INSERT INTO EMPLOYEE2 VALUES (101, 'Alice', 50000, 'HR', SYSDATE);
INSERT INTO EMPLOYEE2 VALUES (102, 'Bob', 45000, 'Finance', SYSDATE);
INSERT INTO EMPLOYEE2 VALUES (103, 'Charlie', 60000, 'IT', SYSDATE);
INSERT INTO EMPLOYEE2 VALUES (104, 'David', 55000, 'Marketing', SYSDATE);
INSERT INTO EMPLOYEE2 VALUES (105, 'Emma', 65000, 'IT', SYSDATE);
COMMIT;

SELECT * FROM EMPLOYEE2;

SET SERVEROUTPUT ON;
DECLARE
    v_emp_id NUMBER := 101;
    v_new_salary NUMBER := 60000;
BEGIN
    DBMS_OUTPUT.PUT_LINE('Transaction Started.');
    
    UPDATE EMPLOYEE2
    SET salary = v_new_salary
    WHERE emp_id = v_emp_id;
    DBMS_OUTPUT.PUT_LINE('Salary updated for Employee ID: ' || v_emp_id);
    SAVEPOINT before_delay;
    DBMS_OUTPUT.PUT_LINE('Simulating concurrency issue with a delay...');
    DBMS_LOCK.SLEEP(10);  -- 10-second delay
    
    UPDATE EMPLOYEE2
    SET salary = salary + 500
    WHERE emp_id = v_emp_id;
    DBMS_OUTPUT.PUT_LINE('Salary incremented for Employee ID: ' || v_emp_id);
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Transaction Committed Successfully.');
    
EXCEPTION
    WHEN OTHERS THEN
       DBMS_OUTPUT.PUT_LINE('Error Occurred: ' || SQLERRM);
       ROLLBACK TO before_delay;
       DBMS_OUTPUT.PUT_LINE('Rolled back to savepoinr.');
END;
/
