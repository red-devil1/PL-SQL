-- Experiment 8: Dynamic SQL - Preventing SQL Injection 

-- Write a PL/SQL block that:  
-- • Accepts a table name and column name as input.  
-- • Uses Native Dynamic SQL (EXECUTE IMMEDIATE) to fetch data dynamically.  
-- • Prevents SQL Injection by using bind variables instead of concatenation.



CREATE TABLE EMPLOYEE3 (
    emp_id NUMBER PRIMARY KEY,
    emp_name VARCHAR2(50) NOT NULL,
    salary NUMBER(10,2),
    department VARCHAR(50),
    hire_date DATE DEFAULT SYSDATE
);

INSERT INTO EMPLOYEE3 VALUES (101, 'Alice', 50000, 'HR', SYSDATE);
INSERT INTO EMPLOYEE3 VALUES (102, 'Bob', 45000, 'Finance', SYSDATE);
INSERT INTO EMPLOYEE3 VALUES (103, 'Charlie', 60000, 'IT', SYSDATE);
INSERT INTO EMPLOYEE3 VALUES (104, 'David', 55000, 'Marketing', SYSDATE);
INSERT INTO EMPLOYEE3 VALUES (105, 'Emma', 65000, 'IT', SYSDATE);
COMMIT;

SELECT * FROM EMPLOYEE3;

SET SERVEROUTPUT ON;
DECLARE
    v_table_name VARCHAR2(50) := 'EMPLOYEE3';
    v_column_name VARCHAR2(50) := 'salary';
    v_value VARCHAR2(100);
    v_sql_stmt VARCHAR2(2000);
BEGIN
       v_sql_stmt := 'SELECT ' || DBMS_ASSERT.ENQUOTE_NAME(v_column_name) ||
                  ' FROM ' || DBMS_ASSERT.ENQUOTE_NAME(v_table_name)  ||
                  ' WHERE ROWNUM = 1';
    EXECUTE IMMEDIATE v_sql_stmt INTO v_value;
    DBMS_OUTPUT.PUT_LINE('Fetched Value: ' || v_value);
EXCEPTION
    WHEN OTHERS THEN
       DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/
